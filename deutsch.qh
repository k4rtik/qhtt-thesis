U_f (f: bit -> bit) : (a, b) : (qbit⊗qbit) ->
                      QST (c, d) : (qbit⊗qbit)
                          (requires {(a, b) =q |x,y⟩})
                          (ensures  {(c, d) =q |x,y⊕f(x)⟩})

deutsch : U_f -> QST r: bit
                     (requires {⊤})
                     (ensures  { (r =c 0 ⇒ f(0) == f(1))
                               ∧ (r =c 1 ⇒ f(0) != f(1)) })
deutsch = circ (U_f) -> do
             a <- init 0
             b <- init 1
             apply H to a
             apply H to b
             (c, d) <- U_f (a, b)
             apply H to c
             r <- meas c
             return r
