metavar termvar, x, y ::=

metavar ghostvar, g, ex {{ tex e_x }}, u ::=

metavar subspace, S ::=

metavar state, psi ::=
{{ tex \psi }}

metavar amplitudes, alpha, beta ::=

grammar

Typ, A, B, C :: Ty ::= {{ com Types }}
  | unit               ::   :: Unit
  | bit                ::   :: Bit
  | qbit               ::   :: Qubit        {{ com Logical qubit }}
  | vector             ::   :: Vector       {{ com State vectors }}
  | complex            ::   :: Complex      {{ com Complex scalars }}
  | unitary            ::   :: Unitary      {{ com Unitaries }}
  | prop               ::   :: Prop         {{ com Propositions }}
  | x : A -> B         ::   :: Arrow        {{ com Dependent function }}
  | A times B          ::   :: Pair         {{ com Pair }}
  | G . { P } x : A { Q } :: :: QHTC        {{ com Quantum Hoare Type }}
  | { P } x : A { Q }  :: S :: QHT            {{ com Quantum Hoare Type w/o context }}
  % | QST ( x : A ) { G } ( requires { P } )
  %   ( ensures { Q } )  :: S :: QHoareC      {{ com Q. Hoare Type }}
  % | QST ( x : A ) ( requires { P } )
  %   ( ensures { Q } )  :: S :: QHoare       {{ com Quantum Hoare Type  w/o context }}
  | A [ M / x ]        :: M :: Substitution

Prop, P, Q, R :: '' ::= {{ com Propositions (\textbf{prop}) }}
  | top                   ::  :: Top          {{ com Complete state space, trivial }}
  | bot                   ::  :: Bottom       {{ com \{0\}, trivial }}
  | P /\ Q                ::  :: Conjunction  {{ com Intersection of subspaces. P, Q }}
  | P \/ Q                ::  :: Disjunction  {{ com Sum of subspaces }}
  | U o P                 ::  :: Unitary      {{ com Operator }}
  | x inq S               ::  :: InSubspace   {{ com x lies in subspace S }}
  | M =q psi              ::  :: EqState      {{ com M is equal to state $\psi$ }}
  | uniform ( x )         ::  :: Uniform      {{ com x is uniformly distributed }}
  | x1 ==q x2             ::  :: EqQuantum    {{ com quantum equality }}
  | separable ( x )       ::  :: Separable    {{ com x is separable}}
  | x1 ==cl x2            ::  :: EqClassical  {{ com classical equality }}
  | class ( x )           ::  :: Class        {{ com x is classical}}
  | class ( M )           :: S:: ClassS       {{ com M is classical}}
  | ( P )                 :: M:: Parens
  | P [ M / x ]           :: M:: Substitution
  | x = M                 :: M:: DecEq
  | P * Q                 :: M:: Separation
  | P >> Q                :: M:: Frame
  | not P                 :: M:: Negation

Tm, K, L, M, N :: Tm ::= {{ com Terms }}
  | x           ::  :: Var            {{ com Variable }}
  | ex          :: M:: GVar           {{ com ghost Variable }}
  | ()          ::  :: Unit           {{ com Unit }}
  | 0           ::  :: Zero           {{ com 0 value of type bit }}
  | 1           ::  :: One            {{ com 1 value of type bit }}
  | psi         ::  :: Psi            {{ com Metavariable for quantum state vector }}
  | \ x . M     ::  :: Lam            {{ com Abstraction }}
  | K N         ::  :: App            {{ com Application }}
  | ( M , N )   ::  :: Pair           {{ com Pair }}
  | fst K       ::  :: Fst            {{ com First projection from a pair }}
  | snd K       ::  :: Snd            {{ com Second projection from a pair }}
  | do E        ::  :: Do             {{ com Suspended computation }}
  % | M : A       ::  :: Ascription     {{ com Type annotation }}

Cmd, c :: '' ::= {{ com Commands }}
  | init M                :: :: Initialize      {{ com Initialization }}
  | apply U to M          :: :: ApplyU          {{ com Unitary application }}
  | meas M                :: :: Measurement     {{ com Measurement }}
  | if M then E1 else E2  :: :: IfThenElse      {{ com Conditional }}

Unitary, U :: '' ::= {{ com Unitaries }}
  | I     :: :: Identity      {{ com Identity }}
  | X     :: :: X             {{ com Pauli X }}
  | Y     :: :: Y             {{ com Pauli Y }}
  | Z     :: :: Z             {{ com Pauli Z }}
  | H     :: :: Hadamard      {{ com Hadamard }}
  | CX    :: :: ControlledX   {{ com CNOT }}
  | CZ    :: :: ControlledZ   {{ com Controlled-Z }}

Comp, E, F :: '' ::= {{ com Computations }}
  | return M        :: :: Return  {{ com return }}
  | x <- K ; E      :: :: Run     {{ com run computation K }}
  | x <- c ; E      :: :: Bind    {{ com run command c }}
  | x = M ; E       :: :: Let     {{ com let binding }}

Ctx, G {{ tex \Gamma }} :: 'Ctx' ::= {{ com Contexts }}
  | o               ::  :: Empty         {{ com empty context }}
  | G , x : A       ::  :: Type          {{ com context extension }}
  | G , ex : A      :: M:: GType         {{ com context extension with ghost var }}
  | G , P           ::  :: Prop          {{ com context extension with prop }}


terminals :: 'terminals_' ::=
  | \                      ::   :: lambda     {{ tex \lambda }}
  | ==q                    ::   :: eqQuantum  {{ tex \equiv_q }}
  | ==cl                   ::   :: eqClass    {{ tex \equiv_{cl} }}
  | o                      ::   :: operator   {{ tex \cdot }}
  | |=                     ::   :: seqimp     {{ tex \models }}
  | ->                     ::   :: arrow      {{ tex \rightarrow }}
  | <-                     ::   :: larrow     {{ tex \leftarrow }}
  | =>                     ::   :: rbarrow    {{ tex \Rightarrow }}
  | <                      ::   :: langle     {{ tex \langle }}
  | >                      ::   :: rangle     {{ tex \rangle }}
  | |-                     ::   :: turnstile  {{ tex \vdash }}
  | inc                    ::   :: in         {{ tex \in }}
  | inq                    ::   :: inq        {{ tex \in_q }}
  | =q                     ::   :: eqq        {{ tex =_q }}
  | <-q                    ::   :: initq      {{ tex \stackrel{q}{\leftarrow} }}
  | Pi                     ::   :: pi         {{ tex \Pi }}
  | Sig                    ::   :: Sigma      {{ tex \Sigma }}
  | tau                    ::   :: tau        {{ tex \tau }}
  | sigma                  ::   :: sigma      {{ tex \sigma }}
  | psi                    ::   :: psi        {{ tex \psi }}
  | times                  ::   :: times      {{ tex \otimes }}
  | top                    ::   :: top        {{ tex \top }}
  | bot                    ::   :: bot        {{ tex \bot }}
  | /\                     ::   :: and        {{ tex \wedge }}
  | \/                     ::   :: or         {{ tex \vee }}
  | imp                    ::   :: imp        {{ tex \supset }}
  | not                    ::   :: not        {{ tex \neg }}
  | exists                 ::   :: exists     {{ tex \exists }}
  | forall                 ::   :: forall     {{ tex \forall }}
  | |->                    ::   :: SMapsto    {{ tex \mapsto }}
  | alpha                  ::   :: Alpha      {{ tex \alpha }}
  | beta                   ::   :: Beta       {{ tex \beta }}
  | >>                     ::   :: diff       {{ tex \multimap }}


defns
  Jtype :: '' ::=

defn
  |- G ctx :: :: ctx :: ctx_ {{ com Checking contexts }} by

    -------- :: Empty
    |- o ctx

    |- G ctx
    G |- A type
    ------------- :: Type
    |- G, x:A ctx

    |- G ctx
    G |- P : prop
    --------------- :: Prop
    |- G, P ctx

defn
  G |- A type :: :: Type :: ty_ {{ com $[[A]]$ is a type }} by

    -------------- :: Unit
    G |- unit type

    ------------- :: Bit
    G |- bit type

    -------------- :: Qbit
    G |- qbit type

    -------------- :: Prop
    G |- prop type

    G |- A type
    G, x:A |- B type
    ------------------ :: Pi
    G |- x:A -> B type

    G |- A type
    G |- B type
    ------------------- :: Pair
    G |- A times B type

    G |- A type
    G |- P : prop
    G, x:A |- Q : prop
    ------------------- :: Hoare
    G |- {P} x:A {Q} type

defn
  A = B :: :: TyEq :: tyeq_ {{ com $[[A]]$ and $[[B]]$ are equal as types }} by

defn
  G |- M = N : A :: :: TmEq :: tmeq_ {{ com $[[M]]$ and $[[N]]$ are equal as terms of type $[[A]]$ }} by

defn
  G |- U : unitary :: :: Un :: un_ by

defn
  G |- P : prop :: :: Prop :: prop_ {{ com $[[P]]$ is a $[[prop]]$ }} by

    -------------::TopI
    G |- top:prop

    -------------::BotI
    G |- bot:prop

    G|-P:prop
    G|-Q:prop
    ----------------::ConjI
    G |- P /\ Q:prop

    G|-P:prop
    G|-Q:prop
    ----------------::DisjI
    G |- P \/ Q:prop

    G |- U : unitary
    G |- P : prop
    ----------------::UnI
    G |- U o P:prop

defn
  G |- M : A :: :: Term :: tm_ {{ com term $[[M]]$ has type $[[A]]$ }} by

    -------------::VarE
    G, x:A |- x:A

    ------------::UnitI
    G |- ():unit

    ----------::ZeroI
    G |- 0:bit

    ----------::OneI
    G |- 1:bit

    ---------------::VectorI
    G |- psi:vector

    G, x:A |- M : B
    ---------------------- :: PiI
    G |- \x.M : x:A -> B

    G |- M : A
    G |- N : B
    ----------------------- :: PairI
    G |- (M, N) : A times B

    G |- K : A
    A = B
    ---------- :: ElimIntro
    G |- K : B

    G |- K : x:A -> B
    G |- M : A
    ------------------- :: PiE
    G |- K M : B[M/x]

    G |- K : A times B
    -------------------- :: FstE
    G |- fst K : A

    G |- K : A times B
    ------------------ :: SndE
    G |- snd K : B

    % G |-
    % --------------------::HoareI
    % G |- do E: {P}x:A{Q}

    % G |- A type
    % G |- M : A
    % -------------- :: AscriptionE
    % G |- M:A : A

    G, P*top |- E :  (x:A.{P >> Q})
    --------------------------------::HoareI
    G |- do E : G.{P} x:A {Q}

defn
  G |= P :: :: Prove :: Pr_ {{ com Proof obligation $[[P]]$ }} by

defn
  G , P |- E : ( x : A . { Q } )  :: :: Comp :: comp_ by

    G, P |- E : (x:A.{Q})
    G, x:A, Q |= R
    --------------------::Consq
    G, P |- E : (x:A.{R})

    G |- M : A
    ----------------------------------::Return
    G, P |- return M : (x:A.{P /\ x=M})

    G |- K : {Q1} x:A {Q2}
    G, P |= Q1*top
    G, x:A, P /\ (Q1 >> Q2) |- E : (y:B.{R})
    --------------------------------::HoareE
    G, P |- x <- K; E : (y:B.{R})

defn
  G , P |- x <- c ; E : ( y : A . { Q } ) :: :: Cmd :: cmd_ by

    G |- M : bit
    G, x: qbit, P /\ (x =q psi) |- E : (y:B.{Q})
    --------------------------------------------::Init
    G, P |- x <- init M; E : (y:B.{Q})

    G |- M : qbit
    G, P |= M =q psi
    G, x: bit, ex : qbit, P /\ (M =q psi >> (class(M) /\ ex =q psi)) |- E : (y:B.{Q})
    -------------------------------------------------------------------::Meas
    G, P |- x <- meas M; E : (y:B.{Q})

    G |- U : unitary
    G |- M : qbit
    G, x: unit, (P >> U o P) |- E : (y:B.{Q})
    ----------------------------------------::Unitary
    G, P |- x <- apply U to M; E : (y:B.{Q})
