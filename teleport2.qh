alice : (q, a): (qbit⊗qbit) ->
        QST (x, y): (bit⊗bit)
            {e: qbit, e_x: qbit, e_y: qbit, α: complex, β: complex}
            (requires {q =q α|0⟩+β|1⟩ ∧ (a, e) = |β00⟩})
            (ensures  {class(q) ∧ class(a) ∧
                       (e_x, e_y, e) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|1⟩+β|0⟩)
                                        + |10⟩(α|0⟩-β|1⟩) + |11⟩(α|1⟩-β|0⟩))})
alice = \qa.do
            (q, a) = qa
            apply CX to (q, a)
            apply H to q
            x <- meas q
            y <- meas a
            return (x, y)

alice : (q, a): (qbit⊗qbit) ->
        QST (x, y): (bit⊗bit)
            {e: qbit, e_x: qbit, e_y: qbit, α: complex, β: complex}
            (requires {q =q α|0⟩+β|1⟩ ∧ (a, e) = |β00⟩})
            (ensures  {class(q) ∧ class(a) ∧
                       (e_x, e_y, e) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|1⟩+β|0⟩)
                                        + |10⟩(α|0⟩-β|1⟩) + |11⟩(α|1⟩-β|0⟩))})
alice = \qa.do
            (q, a) = qa
            -- q =q α|0⟩+β|1⟩ ∧ (a, e) =q |β00⟩}
            -- ⇒ (q, a, e) =q 1/√2(α|0⟩(|00⟩+|11⟩)+β|1⟩(|00⟩+|11⟩))
            apply CX to (q, a)
            -- (CX on (q, a)) . (q =q ψ ∧ (a, e) =q |β00⟩)
            -- ⇒ (q, a, e) =q 1/√2(α|0⟩(|00⟩+|11⟩)+β|1⟩(|10⟩+|01⟩))
            apply H to q
            -- (H on q) . ((q, a, e) =q 1/√2(α|0⟩(|00⟩+|11⟩)+β|1⟩(|10⟩+|01⟩)))
            -- ⇒ (q, a, e) =q 1/2(α(|0⟩+|1⟩)(|00⟩+|11⟩) + β(|0⟩-|1⟩)(|10⟩+|01⟩))
            -- ⇒ (q, a, e) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|1⟩+β|0⟩)
            --                   + |10⟩(α|0⟩-β|1⟩) + |11⟩(α|1⟩-β|0⟩))
            x <- meas q
            -- class(q) ∧
            -- (e_x, a, e) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|1⟩+β|0⟩)
            --                 + |10⟩(α|0⟩-β|1⟩) + |11⟩(α|1⟩-β|0⟩))
            y <- meas a
            -- class(q) ∧ class(a) ∧
            -- (e_x, e_y, e) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|1⟩+β|0⟩)
            --                  + |10⟩(α|0⟩-β|1⟩) + |11⟩(α|1⟩-β|0⟩))
            return (x, y)

bob : (x, y, b): (bit⊗bit⊗qbit) ->
      QST q: qbit
          {c: complex, d: complex}
          (requires {b =q c|0⟩+d|1⟩})
          (ensures  {y =c 0 => q =q (c|0⟩+ (-1)^x d|1⟩) ∧
                     y =c 1 => q =q (c|1⟩+ (-1)^x d|0⟩)})
bob = \xyb.do
          (x, y, b) = xyb
          if y then apply X to b else ()
          if x then apply Z to b else ()
          return b

bob : (x, y, b): (bit⊗bit⊗qbit) ->
      QST q: qbit
          {c: complex, d: complex}
          (requires {b =q c|0⟩+d|1⟩})
          (ensures  {y =c 0 => q =q (c|0⟩+ (-1)^x d|1⟩) ∧
                     y =c 1 => q =q (d|0⟩+ (-1)^x c|1⟩)})
bob = \xyb.do
          (x, y, b) = xyb
          -- b =q c|0⟩+d|1⟩
          if y then apply X to b else ()
          -- y =c 0 => b =q (c|0⟩+ d|1⟩) ∧
          -- y =c 1 => b =q (c|1⟩+ d|0⟩)
          if x then apply Z to b else ()
          -- y =c 0 => b =q (c|0⟩+ (-1)^x d|1⟩) ∧
          -- y =c 1 => b =q (c|1⟩+ (-1)^x d|0⟩)
          return b

teleport : q: qbit -> QST b: qbit
                          {ψ: vector}
                          (requires {q =q ψ})
                          (ensures  {class(q) ∧ b =q ψ})
teleport = \q.do
              (a, b) <- bell00 ()
              (x, y) <- alice (q, a)
              b <- bob (x, y, b)
              return b

teleport : q: qbit -> QST b: qbit
                          {ψ: vector}
                          (requires {q =q ψ})
                          (ensures  {class(q) ∧ b =q ψ})
teleport = \q.do
              -- q =q ψ
              -- ⇒ q =q α|0⟩+β|1⟩
              (a, b) <- bell00 ()
              -- q =q ψ ∧ (a, b) =q |β00⟩
              -- ⇒ (q, a, b) =q 1/√2(α|0⟩(|00⟩+|11⟩)+β|1⟩(|00⟩+|11⟩))
              (x, y) <- alice (q, a)
              -- class(q) ∧ class(a) ∧
              -- (e_x, e_y, b) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|1⟩+β|0⟩)
              --                  + |10⟩(α|0⟩-β|1⟩) + |11⟩(α|1⟩-β|0⟩))
              b <- bob (x, y, b)
              -- Merge:
              -- class(q) ∧ class(a) ∧
              -- (e_x, e_y, b) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|1⟩+β|0⟩)
              --                  + |10⟩(α|0⟩-β|1⟩) + |11⟩(α|1⟩-β|0⟩))
              -- and
              -- y =c 0 => b =q (c|0⟩+ (-1)^x d|1⟩) ∧
              -- y =c 1 => b =q (c|1⟩+ (-1)^x d|0⟩)
              -- ⇒
              -- class(q) ∧ class(a) ∧
              -- (e_x, e_y, b) =q 1/2(|00⟩(α|0⟩+β|1⟩) + |01⟩(α|0⟩+β|1⟩)
              --                  + |10⟩(α|0⟩+β|1⟩) + |11⟩(α|0⟩+β|1⟩))
              -- ⇒ (e_x, e_y) =q 1/2(|00⟩+|01⟩+|10⟩+|11⟩) ∧ b =q α|0⟩+β|1⟩
              return b
              -- b =q α|0⟩+β|1⟩ ⇒ b =q ψ
